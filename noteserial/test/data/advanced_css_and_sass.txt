HTML

Doctype Declaration
    Explains version of html being used (ie., HTML 5)
    Example: <!DOCTYPE html>

Head
    Title
    Links to stylesheet (ie. <link rel="stylesheet" href=style.css">)
    Meta tags
        <meta charset="utf-8">
        <meta name="description" content="The page description, blah blah.">
        <meta property="og:blahblah">
            Sets values for how page renders on Facebook

Block and inline elements
    Block elements start on a new line (div, p, h1/h2/h3, ul, ol, li, etc.)
    Inline elements are in the same line (em, strong, etc.)
        In general you cannot nest a block element inside an inline

Div elements
    Generic element that doesn't represent anything

Links
    Use a fragment to link to a specific spot on a page
    Fragment, fragment identifier
        example: #blah


Semantic Elements
    Header
        Can be used for the 'top' of any portion of content that feels like a header
    Footer
        Can be used for the 'bottom' of any portion of content that feels like a footer
    Section
        Generic document section
        Used to mark blocks of content that could have a heading or be saved in a database.
            Not just a paragraph of text.
        Don't use as a hook for styling (use a div instead)
    Article
        Used to mark up content that can be an individual article
        Just use it instead of a div around the content
    Time
        Use to define dates
        Example: <time datetime="2015-12-07">December 7, 2015</time>
        Various formats for datetime value
    Nav
        Wrap lists of navigation items instead of using a div
        Use for main navigation devices of page (not just any link)
    Cite
        Indicates where the quote came from
        Only for referencing documents (not people)
    Figure
        Self-contained content, referenced by the main doc, but that can be removed from main doc
        Can go around image, poem, code samples, etc.
        Example:
            <figure>
                <img ...>
                <figcaption>
            </figure>
        Figcaption element can be above or below
        Common mis-usage is to use <figure> for every image
    Aside
        Portion of content related to main content


CSS

Selectors
    Element selectors
        Example: p {}
    Class selectors
        Example: .class-a {}
    Element & class combo selectors
        Only applies to the given elements with the given class
        Example: p.class-a {}
    ID selectors
        Example: #blah-id {}
    Class to element:
        Example: .class-a p {}

Grouping selectors
    h1, h2 {...}

Short hand vs. long hand
    Example: font vs font-weight, font-family, etc.
    Use all values when writing long-hand

Units
    Pixels are absolute units
        pixels, inches, etc.
        font-size: 30px;
    Em and percent are relative size units
        Sets size relatively. 2 is 2x the default size of the nearest ancestor with a font-size.
            ie. if <body> font-size is 20px, and <h1> is child of <body>...
                body font-size will be 40px
        browser default is 16px;
    Em is for width
    Ex is for height

Color
    Essentially text color
    can use names: {color: purple}
    can use rbg
    can use hsl: {color: hsl(0, ?, ?)}
    background-color can be used on any element
        div {background-color: rgb(0,0,0);}
        body {...}

Cascading
    The most specific style applies
        # nothing specified, the browser sets it
        # imported style sheets, top to bottom
        # styles defined in head on page
        # inline styles

Fonts
    font-family: {font-family: Specific font name, backup, serif/sans;}
    letter-spacing: {letter-spacing: 1.2}
    word-spacing: {word-spacing: 1.2 em}

Font-size
    Use body to set standard font size for site
        Example: body {font-size: 1em;}  (standard browser size)
    Then customize from there using rem (relative size to html tag)
        Example: h1 {font-size: 2rem;}  (twice the body size)
        To set a backup size for browsers that dno't support rem:
            h1 {font-size: 2rem; font-size: 30px;}

Font-weight
    Can use 100-900 to set weight specifically
    If a font does not support all the different weights, 100-500 are "normal", 500+ is "bold"

Font-family
    {font-family: Primary font, Secondary font, ..., generic-font;}
    Generic fonts
        serif
        sans-serif
        cursive
        fantasy
        monospace
    See cssfontstack.com for examples of common font stacks
    Fonts with two words or more need to be in quotes
        {font-family: "Lucida Bright", Blah, serif;}
    fontsquirrel
        Download
        unzip
        copy font files into site
        open style sheet and add:
            @font-face {font-family: 'font-name' ...?}

Psuedo classes & elements
    section p:first-child {}  # only applies if the first child is a p tag
    section p::first-letter {}  # applies to first letter of the p tag
    a:link {}
    a:visited {}

Dynamic psuedo classes
    Only apply when an action is taken
    a:hover, a:focus {}
    Define links in order:
        visited
        hover
        ...?
    .data tr:nth-child(odd) {}  # to stripe rows on a table

Background images
    {backround-image: url(balloons.png);
     background-repeat: horizontal?;
     background-position: <lots of options, look them up>;}
    subtlepatterns.com

    Setting a background image to an element
        set a background color too in case image fails
        make sure text is legible over image and over background color

    Setting quote images around blockquote
        blockquote {background: url(quote-left.png) top left no-repeat, url(quote-right.png) bottom right no-repeat}

Gradients
    body {background-image: linear-gradient(#ffffff, #999999, ..., ...)}
    to set gradient left to right: linear-gradient(to right, color1, color2, ...)
    Can set hard lines in certain parts
    Can set radial gradients
    Can use a generator to generate css that will work for all browsers

Box shadow
    {box-shadow: 2px 2px 6px 10px #333333;}  # what are these value?
    Also have "inset" option to make shadow isnet

Opacity
    {opacity: .5;}  # 1 is opaque
    To not affect text (only wrapper)
        ?

CSS Layout Model
    Margins - whitespace around an element
    Borders around an element
    Padding - space between border and content
    Positioning
        absolute - removes element from normal flow
        relative
    Floats
        Most common for creating columns
        Better alternatives these days in a lot of cases

Margins & Padding
    Margins are outside element
    Padding is inside element
        will add to width unless you add 'box-sizing' attribute

Absolute positioning
    {position: absolute;
     top: 20px;
     top: 20px;}
     "Aboslute" position is relative to parent if parent has a position,
        (even if it's position is relative)

Relative positioning
    {position: relative; top:20px; right: 20px;}

Float
    Can only float left or right
    Commonly used to format <li> elements such as navigation links
        ie. styling li tags as boxes in a dynamic grid
    clear: left, right, or both
    To clear dynamically:
        .clr:after {
            content: "";
            display: table;
            clear: both;
        }
        then add 'clr' to classes for any box that has floats that need to be cleared

Inheriting box sizing (padding extends inward instead of outward)
    html {box-sizing: border-box;}
    *, *:before, *:after {box-sizing: inherit;}


* display: block;  # makes entire area clickable instead of just the text

Footer full width:
    Move footer outside of wrapper/content, but still inside body
    Wrap footer content in "wrapper" class to match body content
    Keep "wrapper" class simple so it can be re-used like this


 FORMS

FORM ELEMENT
Input needs
    name (field name)
    type ("text", "email", "url", "number", "password", "color", "date", "submit")
        color not supported on some browsers
        "submit" typ
    required (required="required")
    placeholder (placeholder="Placeholder text")

Label
    for - to use this attribute, field must have an id.
        'for' attribute associates it with field id.
Textarea element
    <label for="message"></label>
    <textarea id="message" name="message" cols="20" rows="10"></textarea>

Button
    type ("button", ...?)

File field
    <input name="photo" id="photo" type="file">
    requires enctype
        <form method="post"...enctype="multipart/form">
    accept - accept=".jpg,.png,.gif"
    almost impossible to style

Hidden fields
    <type="hidden" name="form" value="hidden_value">

Checkboxes
    <input type="checkbox" name="mailing" id="mailing" value="true">
    value is what gets sent if checkbox is checked (does not indicate that checkbox is checked)

Radio button
    <input type="radio" name="like_cheese" id="checked_yes" value="yes">
    <input type="radio" name="like_cheese" id="checked_no" value="no">

Select
    <select name="fav" id="fav"> # add multiple="true" to allow multiple selections
        <option>Please Select</option>
            <optgroup label="Blue cheese">
            <option value="stilton" >Stilton</option>
        <option>Please Select</option>
            <optgroup label="Blue cheese">
            <option value="stilton" >Stilton</option>
    </select>

Fieldset
    <fieldset>
        <label>Blah</label>
        <input type="radio" name="like_cheese" id="checked_yes" value="yes">
        <input type="radio" name="like_cheese" id="checked_no" value="no">
    </fieldset>

FORM CSS
    .forms input[type="text"], .forms input[type="email"] {}
    .forms input[type="text"]:hover {}
    .forms input[type="text"]:active {}
        (while holding down on a button)
    .forms input[type="text"]:focus {}
        (the field that has the cursor)
    .forms input[type="text"]:invalid {}
        (styles field until input is valid)

EMBEDDING
    <audio src="filename.mp3" controls preload="auto"></audio>

########################################################################################################################
RESPONSIVE DESIGN

Media Queries
    @media screen and (min-width: 720px) {
            .main {
                float: left;
                width: 60%;
            }

            .sub {
                float: right;
                width: 30%;
            }
        }

Fluid images
    img {max-width: 100%;}

Fluid grids
    @media screen and (min-width: 700px) {
        //
    }

Mobile first approach


########################################################################################################################
DEBUGGING

Use validators to check html and css files


########################################################################################################################
> ORGANIZING, DEVELOPING, AND OPTIMIZING YOUR CSS

CREATE A FUNCTIONAL SPEC(IFICATION)
Browser
    Do I need to interface with...?
        Chrome
            C37/C38
        Firefox
            FF 32
        IE
            IE 11
        Edge
        -Safari-
        -Opera-
    Search "browser penetration" for statistics of usage
    Chrome, Safari, and Opera all use the same rendering engine, so consistent appearance

Accessibility
    ...

CREATE A STYLE GUIDE

CREATE PAGE ...?